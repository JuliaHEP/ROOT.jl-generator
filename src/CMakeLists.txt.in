cmake_minimum_required(VERSION 3.12)

project(ROOT)

# If no explicit ROOTSYS is set, use ${ROOTSYS} environment variable to search
# for ROOT. This may be set by sourcing thisroot.sh from an installation.
if(NOT DEFINED ROOTSYS AND DEFINED ENV{ROOTSYS})
  file(TO_CMAKE_PATH $ENV{ROOTSYS} ROOTSYS)
  list(INSERT CMAKE_PREFIX_PATH 0 ${ROOTSYS})
endif()

# Use ${ROOTSYS} CMake variable to search for ROOT. This is set when roottest is
# built as part of ROOT, i.e., when ROOT is configured with -Droottest=ON. It
# may also be set by passing -DROOTSYS=<PATH> to CMake when configuring a
# standalone roottest against an installation of ROOT. If this is set, it takes
# precedence over the environment to ensure that when roottest is being built in
# a ROOT build configured with -Droottest=ON, it will find the ROOT being built,
# and not a ROOT installation sourced with thisroot.sh or found in $PATH.
if(DEFINED ROOTSYS)
  list(INSERT CMAKE_PREFIX_PATH 0 ${ROOTSYS})
endif()

find_package(ROOT REQUIRED CONFIG)

set(WRAPPER_MODULE ${PROJECT_NAME})
set(WRAPPER_LIB jl${WRAPPER_MODULE})
set(WRAPPER_JULIA_PACKAGE_DIR ${WRAPPER_MODULE})
set(WRAPPER_JULIA_PACKAGE_FILE ${WRAPPER_MODULE}.jl)

#if("${CXXWRAP_REQUESTED_VERSION}" STREQUAL "")
#execute_process(
#    COMMAND ${JULIA} --project=${CMAKE_BINARY_DIR} -e "import Pkg; Pkg.add(\"CxxWrap\"); import CxxWrap; print(pkgversion(CxxWrap));"
#  OUTPUT_VARIABLE CXXWRAP_INSTALLED_VERSION
#  RESULT_VARIABLE result
#)
#  #if no CxxWrap version requirement was specified in the .wit file,
#  #we align it to the version that was installed
#  set(WRAPIT_OPT --add-cfg "cxxwrap_version=\"${CXXWRAP_INSTALLED_VERSION}\"")
#  message(STATUS ${WRAPIT})
#else()
#execute_process(
#    COMMAND ${JULIA} --project=${CMAKE_BINARY_DIR} -e "import Pkg; import CxxWrap; Pkg.add(name=\"CxxWrap\", version=\"${CXXWRAP_REQUESTED_VERSION}\"); Pkg.resolve(); print(pkgversion(CxxWrap));"
#  OUTPUT_VARIABLE CXXWRAP_INSTALLED_VERSION
#  RESULT_VARIABLE result)
#endif()
#
#if(NOT result EQUAL 0)
#  message(FATAL_ERROR "Failed to install CxxWrap")
#elseif("${CXXWRAP_REQUESTED_VERSION}" STREQUAL "")
#  message(STATUS "CxxWrap version requested to be compatible with any version, using v${CXXWRAP_INSTALLED_VERSION}")
#else()
#  message(STATUS "CxxWrap version requested to be compatible with ${CXXWRAP_REQUESTED_VERSION}, using version: ${CXXWRAP_INSTALLED_VERSION}")
#endif()
#
#execute_process(
#  COMMAND "${JULIA}" --project=${CMAKE_BINARY_DIR} -e "import CxxWrap; print(CxxWrap.prefix_path())"
#  OUTPUT_STRIP_TRAILING_WHITESPACE
#  OUTPUT_VARIABLE CXXWRAP_PREFIX
#  RESULT_VARIABLE result)
#
#if(NOT result EQUAL 0)
#  message(FATAL_ERROR "Failed to retrieve CxxWrap library path")
#else()
#  message(STATUS "CxxWrap library path prefix: ${CXXWRAP_PREFIX}")
#endif()

find_package(JlCxx PATHS ${CXXWRAP_PREFIX})

get_target_property(JlCxx_location JlCxx::cxxwrap_julia LOCATION)
get_filename_component(JlCxx_location ${JlCxx_location} DIRECTORY)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib;${JlCxx_location}")

# File generated by wrapit that defines two variables, WRAPIT_PRODUCTS and
# WRAPIT_INPUT, with respectively the list of produced c++ code file and
# the list of files their contents on.
include("${CMAKE_SOURCE_DIR}/wrapit.cmake")

# Require reconfiguration if one of the dependency of the contents produced
# by wrapit (itself executed at configure step) changed:
set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS "${WRAPIT_DEPENDS}" "${WRAPIT_WIT_FILE}")

# Build the library.
add_library(${WRAPPER_LIB} SHARED ${WRAPIT_PRODUCTS})
set_target_properties(${WRAPPER_LIB}
  PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${WRAPPER_JULIA_PACKAGE_DIR}/deps)
target_include_directories(${WRAPPER_LIB} PRIVATE ${CMAKE_SOURCE_DIR})
target_link_libraries(${WRAPPER_LIB} JlCxx::cxxwrap_julia ROOT::Core)

# Installation paths:
set(WRAPPER_INSTALL_DIR "share/wrapit" CACHE FILEPATH "Installation path for the test modules")
install(FILES ${CMAKE_BINARY_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/src/${WRAPPER_JULIA_PACKAGE_FILE}
  DESTINATION ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/src)
install(TARGETS ${WRAPPER_LIB}
  LIBRARY DESTINATION  ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/deps
  ARCHIVE DESTINATION ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/deps 
  RUNTIME DESTINATION ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/deps)

